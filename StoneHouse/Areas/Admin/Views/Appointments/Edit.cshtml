@model StoneHouse.Models.ViewModel.AppointmentDetailViewModel
<!--Add the extension-->
@using StoneHouse.Extensions
@using StoneHouse.Utility
@{
    ViewData["Title"] = "Edit";
}

<br />

<h2 class="text-info">Edit Appointment</h2>


<!--The asp-action is not required becasue the post method will by default post to the name of this view
    This only works if you are trying to make an action Create as both this view and teh action names will be the same-->
<!--The enctype is used because of images -->
<form method="post" enctype="multipart/form-data">
    <div class="p-4 border rounded row">
        <input hidden asp-for="Appointments.Id" />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="col-6">

            <div class="form-group row">
                <div class="col-4">
                    <!--The 'asp-for' will automatically bind this Name to the ProductTypes model property called Name -->
                    <label asp-for="Appointments.CustomerName"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Appointments.CustomerName" class="form-control" />
                </div>
                <span asp-validation-for="Appointments.CustomerName" class="text-danger"></span>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    <!--The 'asp-for' will automatically bind this Name to the ProductTypes model property called Name -->
                    <label asp-for="Appointments.CustomerEmail"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Appointments.CustomerEmail" class="form-control" />
                </div>
                <span asp-validation-for="Appointments.CustomerEmail" class="text-danger"></span>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    <!--The 'asp-for' will automatically bind this Name to the ProductTypes model property called Name -->
                    <label asp-for="Appointments.AppointmentDate"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Appointments.AppointmentDate" id="datepicker" type="text" class="form-control" />
                </div>
                <span asp-validation-for="Appointments.AppointmentDate" class="text-danger"></span>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    <!--The 'asp-for' will automatically bind this Name to the ProductTypes model property called Name -->
                    <label asp-for="Appointments.AppointmentTime"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Appointments.AppointmentTime" id="timepicker" type="text" class="timepicker form-control" />
                </div>
                <span asp-validation-for="Appointments.AppointmentTime" class="text-danger"></span>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    <!--The 'asp-for' will automatically bind this Name to the ProductTypes model property called Name -->
                    <label asp-for="Appointments.CustomerPhone"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Appointments.CustomerPhone" class="form-control" />
                </div>
                <span asp-validation-for="Appointments.CustomerPhone" class="text-danger"></span>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    <!--The 'asp-for' will automatically bind this Name to the ProductTypes model property called Name -->
                    <label asp-for="Appointments.SalesPerson"></label>
                </div>
                <div class="col-8">
                    @if (User.IsInRole(StaticDetails.AdminEndUser))
                    {
                        <input asp-for="@Model.Appointments.SalesPerson.Name" readonly class="form-control" />
                        <input asp-for="@Model.Appointments.SalesPersonId" hidden />
                    }
                    else
                    {
                        <select asp-for="@Model.Appointments.SalesPersonId" asp-items="@Model.SalesPerson.ToSelectListItemString(Model.Appointments.SalesPersonId)" class="form-control"></select>
                    }
                </div>
            </div>
            <div class="form-group row">
                <div class="col-4">
                    <!--The 'asp-for' will automatically bind this Name to the ProductTypes model property called Name -->
                    <label asp-for="Appointments.isConfirmed"></label>
                </div>
                <div class="col-8">
                    <input asp-for="Appointments.isConfirmed" class="form-control" />
                </div>
            </div>

        </div>

        <div class="col-6">
            <!--Display the products on the right-->
            <partial name="~/Views/Shared/_AppointmentProductDetails.cshtml" model="Model.Products" />
        </div>



        <br />

        <div class="form-group">
            <input type="submit" class="btn btn-primary" value="Update" />
            <a asp-action="Index" class="btn btn-success">Back To List</a>
        </div>

    </div>



</form>

<!--Call the validationscript view which is outside of the area
    All the javascripts for the 'asp-validation-summary' is included in here-->
@section Scripts{
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial");}


        <script>

            $('.timepicker').timepicker({
                timeFormat: 'h:mm p',
                interval: 30,
                minTime: '10',
                maxTime: '3:00pm',
                startTime: '10:00',
                dynamic: true,
                dropdown: true,
                scrollbar: true
            });

            $(function () {
                $("#datepicker").datepicker({
                    dateFormat: 'dd-mm-yy',
                    minDate: +1,
                    maxDate: "+3M"
                });
            });

            $(document).ready(function () {

                //get whatever value is inside the appointment time
                var appointmentTime = document.getElementById('datepicker').value;
                //create empty splitData var
                var splitData = "";

                //if the first space in the appointmentTime is greater than 0
                if (appointmentTime.indexOf(" ") > 0) {

                    //split appointmentTime base don space and set it to splitData
                    splitData = appointmentTime.split(" ");

                 //else split based on 'T'
                //becasue some browser displays T instead of space
                } else {
                    splitData = appointmentTime.split("T");
                }

                var time = splitData[1].substring(0, 5);

                //sometimes it will sneak in another colomn at the end of time

                if (time.slice(-1) == ":") {
                    //so the last character of the time will be removed which can be a columns sometimes
                    time = time.substring(0, time.length - 1);
                }

                var amPmTime = splitData[2];

                $("#datepicker").attr("value", splitData[0]);
                $("#timepicker").attr("value", time + ' ' + amPmTime);

            })

        </script>


}

